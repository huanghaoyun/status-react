pipeline {
  agent { label 'master' }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '10',
      artifactDaysToKeepStr: '30'
    ))
  }
  
  environment {
    LANG = 'en_US.UTF-8'
    LANGUAGE = 'en_US.UTF-8'
    LC_ALL = 'en_US.UTF-8'
    FASTLANE_DISABLE_COLORS=1
    REALM_DISABLE_ANALYTICS=1
  }
  
  stages {
    /* Necessary to load methods */
    stage('Prep') {
      steps {
        script {
          checkout scm
          mobile = load 'ci/mobile.groovy'
          desktop = load 'ci/desktop.groovy'
          mobile.tagBuild()
        }
      }
    }
    
    stage('Build') {
      parallel {
        stage('iOS') {
          agent { label 'fastlane' }
          steps {
            script {
              mobile.prepDeps()
              mobile.runTests()
              mobile.leinBuild()
              mobile.compileiOS()
            }
          }
        }
        stage('Android') {
          agent { label 'linux-new' }
          steps {
            script {
              mobile.prepDeps()
              mobile.runTests()
              mobile.leinBuild()
              mobile.compileAndroid()
            }
          }
        }
        stage('MacOS') {
          agent { label 'macos' }
          steps {
            script {
              desktop.prepDeps()
              desktop.buildClojureScript()
              desktop.compileMacOS()
              def dmg_file = desktop.bundleMacOS()
              archiveArtifacts "StatusImPackage/${dmg_file}"
            }
          }
        }
        stage('Linux') {
          agent { label 'linux-new'  }
          steps {
            script {
              desktop.prepDeps()
              desktop.buildClojureScript()
              desktop.compileLinux()
              def app_file = desktop.bundleLinux()
              archiveArtifacts "StatusImPackage/${app_file}"
            }
          }
        }
      }
    }
  
    //stage('Slack Notification') {
    //  slackSend(
    //    message: (
    //      "Nightly build (develop)\n" +
    //      "Android: ${apkUrl}\n" +
    //      "iOS: ${ipaUrl}\n" +
    //      "Android for e2e: ${testApkUrl}"
    //    ),
    //    color: 'good'
    //  )
    //}
    //
    //stage('Run extended e2e tests') {
    //  build(
    //    job: 'end-to-end-tests/status-app-nightly',
    //    parameters: [string(name: 'apk', value: '--apk=' + apk_name)],
    //    wait: false
    //  )
    //}
    //
    //stage('Update nightly links') {
    //  build(
    //    job: 'misc/status-im.github.io-update_env',
    //    parameters: [
    //      [$class: 'StringParameterValue', name: 'APK_URL', value: apkUrl],
    //      [$class: 'StringParameterValue', name: 'IOS_URL', value: ipaUrl],
    //      [$class: 'StringParameterValue', name: 'DMG_URL', value: dmgUrl],
    //      [$class: 'StringParameterValue', name: 'NIX_URL', value: appUrl]
    //    ]
    //  )
    //}
  }
}
